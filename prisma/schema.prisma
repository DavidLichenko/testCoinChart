// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                  String              @id @default(uuid())
  email               String              @unique
  number              String
  password            String
  name                String?
  role                UserRole            @default(USER)
  imageUrl            String?
  provider            String?
  status              UserStatus          @default(NEW)
  providerId          String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  orders              Orders[]
  trade_transaction   Trade_Transaction[]
  user_crypto_address String?
  deposit_message     String?
  withdraw_error      String?
  can_withdraw        Boolean             @default(true)
  blocked             Boolean             @default(false)
  balance             Balances[]
  comments            Comments[]
  isVerif             Boolean             @default(false)
  verification        Verification[]
  TotalBalance        Float?              @default(0)
  messages            Message[]
  assignedTo          String? // ID of the worker this user is assigned to
}

model Orders {
  id        String      @id @default(cuid())
  status    OrderStatus
  type      OrderType
  amount    Float
  User      User        @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Trade_Transaction {
  id         String                 @id @default(uuid())
  status     TradeTransactionStatus @default(OPEN)
  type       TradeTransactionType
  volume     Float
  margin     Float
  leverage   Int
  profit     Float?
  ticker     String
  openInA    Float
  openIn     Float
  closeIn    Float?
  takeProfit Float?
  stopLoss   Float?
  userId     String
  User       User                   @relation(fields: [userId], references: [id])
  createdAt  DateTime               @default(now())
  endAt      DateTime?
  assetType  AssetType              @default(IEX) // Add this line
}

model Balances {
  userId String @id
  usd    Float  @default(0)
  User   User   @relation(fields: [userId], references: [id])
}

model Verification {
  id             Int      @id @default(autoincrement())
  userId         String
  back_id_image  String?
  back_id_verif  Boolean? @default(false)
  front_id_image String?
  front_id_verif Boolean? @default(false)
  street_address String?
  city           String?
  zip_code       String?
  User           User     @relation(fields: [userId], references: [id])
}

model CryptoAddresses {
  id                Int     @id @default(autoincrement())
  btc_address       String?
  btc_BTCaddress    String?
  eth_address       String?
  ethERC20_address  String?
  usdt_address      String?
  usdtTRC20_address String?
}

model Comments {
  userId   String @id
  messages Json?
  User     User   @relation(fields: [userId], references: [id])
}

model Message {
  id               String   @id @default(cuid())
  content          String
  imageUrl         String?
  isSupportMessage Boolean  @default(false)
  createdAt        DateTime @default(now())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
}

enum OrderStatus {
  PENDING
  SUCCESSFUL
  CANCELLED
}

enum TradeTransactionType {
  BUY
  SELL
}

enum OrderType {
  DEPOSIT
  WITHDRAW
}

enum TradeTransactionStatus {
  OPEN
  CLOSE
}

enum UserRole {
  USER
  OWNER
  ADMIN
  WORKER
  TEAMLEAD
}

enum UserMessage {
  USER
  SUPPORT
}

enum AssetType {
  IEX
  Crypto
  Forex
}

enum UserStatus {
  WRONGNUMBER
  WRONGINFO
  CALLBACK
  LOWPOTENTIONAL
  HIGHPOTENTIONAL
  NOTINTERESTED
  DEPOSIT
  TRASH
  DROP
  NEW
  RESIGN
  COMPLETED
}
